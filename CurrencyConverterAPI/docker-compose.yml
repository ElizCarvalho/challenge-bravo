version: '3.8'

services:
  currency_converter:
    container_name: currencyconverter
    image: ${DOCKER_REGISTRY-}currency_converter
    build:
      context: .
      dockerfile: CurrencyConverterAPI/Dockerfile
    environment:
      - ApiConfiguration__CurrencyBallast=${CURRENCYBALLAST}
      - ResiliencePollicy__retryCount=${RETRYCOUNT}
      - ResiliencePollicy__exceptionsAllowedBeforeBreaking=${EXCEPTIONALLOWEDBEFOREBREAKING}
      - ResiliencePollicy__durationOfBreakInSeconds=${DURATIONOFBREAKINSECONDS}
      - Serilog__WriteTo__1__Args__serverUrl=${SEQSERVERURL}
      - Serilog__WriteTo__1__Args__apiKey=${SEQAPIKEY}
      - Redis__Host=${REDISHOST}
      - Redis__Port=${REDISPORT}
      - Redis__Password=${REDISPASS}
      - Redis__Database=${REDISDATABASE}
      - DatabaseConfiguration__ConnectionString=mongodb://${MONGOUSERNAME}:${MONGOPASS}@mongo/
      - DatabaseConfiguration__DatabaseName=${MONGODATABASENAME}
      - DatabaseConfiguration__CoinsCollectionName=${MONGOCOINSCOLLECTION}
    ports:
      - "9000:5000"
    depends_on:
      - redis
      - mongo
    networks:
      - bravo-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: curl --fail http://localhost:5000/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s

  seq:
    container_name: seq
    image: ecarvalh2020/bravo_seq:1.0
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINUSERNAME=${SEQADMINUSERNAME}
      - SEQ_FIRSTRUN_ADMINPASSWORDHASH=${SEQADMINPASSWORDHASH}
      - SEQ_FIRSTRUN_REQUIREAUTHTENTICATIONFORHTTPINGESTION=True
    ports:
      - "5341:80"
    networks:
      - bravo-net
    volumes: 
      - seq_data:/data
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: curl --fail http://localhost/health || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s
  
  redis:
    container_name: redis
    image: redis
    command: redis-server --appendonly yes --requirepass ${REDISPASS}
    ports:
      - "6379:6379"
    networks:
      - bravo-net
    volumes: 
      - redis_data:/data
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      - REDIS_REPLICATION_MODE=master
  
  prometheus:
    container_name: prometheus
    image: ecarvalh2020/bravo_prometheus:1.0
    ports:
      - "9090:9090"
    command: 
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - bravo-net
    volumes: 
      - prometheus_data:/prometheus
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  mongo:
    container_name: mongo
    image: mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGOUSERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGOPASS}
    networks:
      - bravo-net
    volumes: 
      - mongo_data:/data/db
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

networks:
  bravo-net:
    name: bravo-net
    driver: bridge

volumes:
  seq_data:
  redis_data:
  prometheus_data:
  mongo_data: